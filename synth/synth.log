
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 aafaeb66, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Running command `read_verilog  -DFPGA -DFPGA_ICE40 ../hdl/fpga/smoldvi_fpga_icebreaker.v ../hdl/fpga/pll_12_126.v ../hdl/libfpga/common/blinky.v ../hdl/libfpga/common/fpga_reset.v ../hdl/libfpga/common/reset_sync.v; synth_ice40 ; write_json smoldvi_icebreaker.json' --

1. Executing Verilog-2005 frontend: ../hdl/fpga/smoldvi_fpga_icebreaker.v
Parsing Verilog input from `../hdl/fpga/smoldvi_fpga_icebreaker.v' to AST representation.
Generating RTLIL representation for module `\smoldvi_fpga'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ../hdl/fpga/pll_12_126.v
Parsing Verilog input from `../hdl/fpga/pll_12_126.v' to AST representation.
Generating RTLIL representation for module `\pll_12_126'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ../hdl/libfpga/common/blinky.v
Parsing Verilog input from `../hdl/libfpga/common/blinky.v' to AST representation.
Generating RTLIL representation for module `\blinky'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: ../hdl/libfpga/common/fpga_reset.v
Parsing Verilog input from `../hdl/libfpga/common/fpga_reset.v' to AST representation.
Generating RTLIL representation for module `\fpga_reset'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: ../hdl/libfpga/common/reset_sync.v
Parsing Verilog input from `../hdl/libfpga/common/reset_sync.v' to AST representation.
Generating RTLIL representation for module `\reset_sync'.
Successfully finished Verilog frontend.

6. Executing SYNTH_ICE40 pass.

6.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

6.2. Executing HIERARCHY pass (managing design hierarchy).

6.2.1. Finding top of design hierarchy..
root of   0 design levels: reset_sync          
root of   0 design levels: fpga_reset          
root of   0 design levels: blinky              
root of   1 design levels: pll_12_126          
root of   2 design levels: smoldvi_fpga        
Automatically selected smoldvi_fpga as design top module.

6.2.2. Analyzing design hierarchy..
Top module:  \smoldvi_fpga
Used module:     \blinky
Used module:     \reset_sync
Used module:     \fpga_reset
Used module:     \pll_12_126
Parameter \CLK_HZ = 12000000
Parameter \BLINK_HZ = 1

6.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\blinky'.
Parameter \CLK_HZ = 12000000
Parameter \BLINK_HZ = 1
Generating RTLIL representation for module `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1'.
Parameter \SHIFT = 3
Parameter \COUNT = 127

6.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\fpga_reset'.
Parameter \SHIFT = 3
Parameter \COUNT = 127
Generating RTLIL representation for module `$paramod\fpga_reset\SHIFT=3\COUNT=127'.

6.2.5. Analyzing design hierarchy..
Top module:  \smoldvi_fpga
Used module:     $paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1
Used module:     \reset_sync
Used module:     $paramod\fpga_reset\SHIFT=3\COUNT=127
Used module:     \pll_12_126

6.2.6. Analyzing design hierarchy..
Top module:  \smoldvi_fpga
Used module:     $paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1
Used module:     \reset_sync
Used module:     $paramod\fpga_reset\SHIFT=3\COUNT=127
Used module:     \pll_12_126
Removing unused module `\fpga_reset'.
Removing unused module `\blinky'.
Removed 2 unused modules.

6.3. Executing PROC pass (convert processes to netlists).

6.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$../hdl/libfpga/common/reset_sync.v:32$14 in module reset_sync.
Marked 1 switch rules as full_case in process $proc$../hdl/libfpga/common/fpga_reset.v:56$366 in module $paramod\fpga_reset\SHIFT=3\COUNT=127.
Marked 1 switch rules as full_case in process $proc$../hdl/libfpga/common/fpga_reset.v:39$362 in module $paramod\fpga_reset\SHIFT=3\COUNT=127.
Marked 1 switch rules as full_case in process $proc$../hdl/libfpga/common/blinky.v:57$356 in module $paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.
Marked 1 switch rules as full_case in process $proc$../hdl/fpga/smoldvi_fpga_icebreaker.v:54$1 in module smoldvi_fpga.
Removed a total of 0 dead cases.

6.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 6 redundant assignments.
Promoted 5 assignments to connections.

6.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:55$374'.
  Set init value: \has_counter.ctr_zero = 1'0
Found init rule in `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:54$373'.
  Set init value: \has_counter.ctr = 7'1111111
Found init rule in `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:38$372'.
  Set init value: \has_shifter.shift = 3'000
Found init rule in `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:34$361'.
  Set init value: \blink_r = 1'0
Found init rule in `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:32$360'.
  Set init value: \ctr = 23'00000000000000000000000

6.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_n_in in `\reset_sync.$proc$../hdl/libfpga/common/reset_sync.v:32$14'.
Found async reset \stage1_out in `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:56$366'.
Found async reset \force_rst_n in `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:39$362'.
Found async reset \rst_n_bit in `\smoldvi_fpga.$proc$../hdl/fpga/smoldvi_fpga_icebreaker.v:54$1'.

6.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\reset_sync.$proc$../hdl/libfpga/common/reset_sync.v:32$14'.
     1/1: $0\delay[1:0]
Creating decoders for process `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:55$374'.
Creating decoders for process `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:54$373'.
Creating decoders for process `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:38$372'.
Creating decoders for process `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:56$366'.
     1/2: $0\has_counter.ctr_zero[0:0]
     2/2: $0\has_counter.ctr[6:0]
Creating decoders for process `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:39$362'.
     1/1: $0\has_shifter.shift[2:0]
Creating decoders for process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:34$361'.
Creating decoders for process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:32$360'.
Creating decoders for process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:57$356'.
     1/2: $0\ctr[22:0]
     2/2: $0\blink_r[0:0]
Creating decoders for process `\smoldvi_fpga.$proc$../hdl/fpga/smoldvi_fpga_icebreaker.v:54$1'.
     1/1: $0\bit_pix_div[4:0]

6.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

6.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\reset_sync.\delay' using process `\reset_sync.$proc$../hdl/libfpga/common/reset_sync.v:32$14'.
  created $adff cell `$procdff$381' with positive edge clock and negative level reset.
Creating register for signal `$paramod\fpga_reset\SHIFT=3\COUNT=127.\has_counter.ctr' using process `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:56$366'.
  created $adff cell `$procdff$382' with positive edge clock and negative level reset.
Creating register for signal `$paramod\fpga_reset\SHIFT=3\COUNT=127.\has_counter.ctr_zero' using process `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:56$366'.
  created $adff cell `$procdff$383' with positive edge clock and negative level reset.
Creating register for signal `$paramod\fpga_reset\SHIFT=3\COUNT=127.\has_shifter.shift' using process `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:39$362'.
  created $adff cell `$procdff$384' with positive edge clock and negative level reset.
Creating register for signal `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.\ctr' using process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:57$356'.
  created $dff cell `$procdff$385' with positive edge clock.
Creating register for signal `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.\blink_r' using process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:57$356'.
  created $dff cell `$procdff$386' with positive edge clock.
Creating register for signal `\smoldvi_fpga.\bit_pix_div' using process `\smoldvi_fpga.$proc$../hdl/fpga/smoldvi_fpga_icebreaker.v:54$1'.
  created $adff cell `$procdff$387' with positive edge clock and negative level reset.

6.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `reset_sync.$proc$../hdl/libfpga/common/reset_sync.v:32$14'.
Removing empty process `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:55$374'.
Removing empty process `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:54$373'.
Removing empty process `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:38$372'.
Removing empty process `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:56$366'.
Removing empty process `$paramod\fpga_reset\SHIFT=3\COUNT=127.$proc$../hdl/libfpga/common/fpga_reset.v:39$362'.
Removing empty process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:34$361'.
Removing empty process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:32$360'.
Found and cleaned up 1 empty switch in `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:57$356'.
Removing empty process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:57$356'.
Removing empty process `smoldvi_fpga.$proc$../hdl/fpga/smoldvi_fpga_icebreaker.v:54$1'.
Cleaned up 1 empty switch.

6.4. Executing FLATTEN pass (flatten design).
Using template pll_12_126 for cells of type pll_12_126.
Using template $paramod\fpga_reset\SHIFT=3\COUNT=127 for cells of type $paramod\fpga_reset\SHIFT=3\COUNT=127.
Using template reset_sync for cells of type reset_sync.
Using template $paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1 for cells of type $paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.
<suppressed ~5 debug messages>
No more expansions possible.
Deleting now unused module reset_sync.
Deleting now unused module $paramod\fpga_reset\SHIFT=3\COUNT=127.
Deleting now unused module $paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.
Deleting now unused module pll_12_126.

6.5. Executing TRIBUF pass.

6.6. Executing DEMINOUT pass (demote inout ports to input or output).

6.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.
<suppressed ~1 debug messages>

6.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..
Removed 5 unused cells and 21 unused wires.
<suppressed ~6 debug messages>

6.9. Executing CHECK pass (checking for obvious problems).
checking module smoldvi_fpga..
Warning: Wire smoldvi_fpga.\led [1] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_p [3] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_p [2] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_p [1] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_p [0] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_n [3] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_n [2] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_n [1] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_n [0] is used but has no driver.
found and reported 9 problems.

6.10. Executing OPT pass (performing simple optimizations).

6.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

6.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

6.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \smoldvi_fpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \smoldvi_fpga.
Performed a total of 0 changes.

6.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

6.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

6.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

6.10.9. Finished OPT passes. (There is nothing left to do.)

6.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 6 bits (of 7) from port B of cell smoldvi_fpga.$techmap\rstgen.$sub$../hdl/libfpga/common/fpga_reset.v:61$369 ($sub).
Removed top 6 bits (of 7) from wire smoldvi_fpga.$techmap\rstgen.$reduce_or$../hdl/libfpga/common/fpga_reset.v:61$368_Y.

6.12. Executing PEEPOPT pass (run peephole optimizers).

6.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

6.14. Executing SHARE pass (SAT-based resource sharing).

6.15. Executing TECHMAP pass (map to technology primitives).

6.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

6.15.2. Continuing TECHMAP pass.
No more expansions possible.

6.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

6.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

6.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module smoldvi_fpga:
  creating $macc model for $techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358 ($sub).
  creating $macc model for $techmap\rstgen.$sub$../hdl/libfpga/common/fpga_reset.v:61$369 ($sub).
  creating $alu model for $macc $techmap\rstgen.$sub$../hdl/libfpga/common/fpga_reset.v:61$369.
  creating $alu model for $macc $techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358.
  creating $alu cell for $techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358: $auto$alumacc.cc:485:replace_alu$389
  creating $alu cell for $techmap\rstgen.$sub$../hdl/libfpga/common/fpga_reset.v:61$369: $auto$alumacc.cc:485:replace_alu$392
  created 2 $alu and 0 $macc cells.

6.19. Executing OPT pass (performing simple optimizations).

6.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

6.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

6.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \smoldvi_fpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \smoldvi_fpga.
Performed a total of 0 changes.

6.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

6.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

6.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

6.19.9. Rerunning OPT passes. (Maybe there is more to do..)

6.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \smoldvi_fpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \smoldvi_fpga.
Performed a total of 0 changes.

6.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

6.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

6.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

6.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

6.19.16. Finished OPT passes. (There is nothing left to do.)

6.20. Executing FSM pass (extract and optimize FSM).

6.20.1. Executing FSM_DETECT pass (finding FSMs in design).

6.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

6.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.21. Executing OPT pass (performing simple optimizations).

6.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

6.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

6.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

6.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

6.21.5. Finished fast OPT passes.

6.22. Executing MEMORY pass.

6.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

6.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

6.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

6.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).

6.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

6.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

6.25. Executing TECHMAP pass (map to technology primitives).

6.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

6.25.2. Continuing TECHMAP pass.
No more expansions possible.

6.26. Executing ICE40_BRAMINIT pass.

6.27. Executing OPT pass (performing simple optimizations).

6.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.
<suppressed ~15 debug messages>

6.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

6.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

6.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

6.27.5. Finished fast OPT passes.

6.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

6.29. Executing OPT pass (performing simple optimizations).

6.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

6.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

6.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \smoldvi_fpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \smoldvi_fpga.
Performed a total of 0 changes.

6.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

6.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

6.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

6.29.9. Finished OPT passes. (There is nothing left to do.)

6.30. Executing ICE40_WRAPCARRY pass (wrap carries).

6.31. Executing TECHMAP pass (map to technology primitives).

6.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

6.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adff.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=23\B_WIDTH=1\Y_WIDTH=23 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=1\Y_WIDTH=7 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~64 debug messages>

6.32. Executing OPT pass (performing simple optimizations).

6.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.
<suppressed ~88 debug messages>

6.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

6.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

6.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..
Removed 29 unused cells and 62 unused wires.
<suppressed ~30 debug messages>

6.32.5. Finished fast OPT passes.

6.33. Executing ICE40_OPT pass (performing simple optimizations).

6.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) smoldvi_fpga.$auto$alumacc.cc:485:replace_alu$389.slice[0].carry: CO=\blink.ctr [0]

6.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

6.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

6.33.4. Executing OPT_RMDFF pass (remove dff with constant values).

6.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

6.33.6. Rerunning OPT passes. (Removed registers in this run.)

6.33.7. Running ICE40 specific optimizations.

6.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

6.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

6.33.10. Executing OPT_RMDFF pass (remove dff with constant values).

6.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

6.33.12. Finished OPT passes. (There is nothing left to do.)

6.34. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module smoldvi_fpga:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$480 to $_DFFE_PP_ for $techmap\blink.$0\blink_r[0:0] -> \blink.blink_r.

6.35. Executing TECHMAP pass (map to technology primitives).

6.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

6.35.2. Continuing TECHMAP pass.
Using template \$_DFF_PN0_ for cells of type $_DFF_PN0_.
Using template \$_DFF_PN1_ for cells of type $_DFF_PN1_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~44 debug messages>

6.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.
<suppressed ~2 debug messages>

6.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping smoldvi_fpga.$auto$alumacc.cc:485:replace_alu$389.slice[0].carry ($lut).
Mapping smoldvi_fpga.$techmap$techmap734$auto$simplemap.cc:496:simplemap_adff$478.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:12$715 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap742$auto$simplemap.cc:496:simplemap_adff$479.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:12$715 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap732$auto$simplemap.cc:496:simplemap_adff$451.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:13$716 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap728$auto$simplemap.cc:496:simplemap_adff$477.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:12$715 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap729$auto$simplemap.cc:496:simplemap_adff$448.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:12$715 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap730$auto$simplemap.cc:496:simplemap_adff$449.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:13$716 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap731$auto$simplemap.cc:496:simplemap_adff$450.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:13$716 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap721$auto$simplemap.cc:496:simplemap_adff$455.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:12$715 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap722$auto$simplemap.cc:496:simplemap_adff$456.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:12$715 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap724$auto$simplemap.cc:496:simplemap_adff$464.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:13$716 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap725$auto$simplemap.cc:496:simplemap_adff$458.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:12$715 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap737$auto$simplemap.cc:496:simplemap_adff$460.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:13$716 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap738$auto$simplemap.cc:496:simplemap_adff$461.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:13$716 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap739$auto$simplemap.cc:496:simplemap_adff$462.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:13$716 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap723$auto$simplemap.cc:496:simplemap_adff$457.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:12$715 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap740$auto$simplemap.cc:496:simplemap_adff$463.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:13$716 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap726$auto$simplemap.cc:496:simplemap_adff$459.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:13$716 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap727$auto$simplemap.cc:496:simplemap_adff$476.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:12$715 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap733$auto$simplemap.cc:496:simplemap_adff$447.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:12$715 ($logic_not).
Mapping smoldvi_fpga.$techmap$techmap741$auto$simplemap.cc:496:simplemap_adff$465.$logic_not$/usr/local/bin/../share/yosys/ice40/cells_map.v:13$716 ($logic_not).

6.38. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in smoldvi_fpga.
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$465 (SB_DFFS): \rstgen.has_counter.ctr [6] = 1
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$463 (SB_DFFS): \rstgen.has_counter.ctr [4] = 1
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$462 (SB_DFFS): \rstgen.has_counter.ctr [3] = 1
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$461 (SB_DFFS): \rstgen.has_counter.ctr [2] = 1
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$460 (SB_DFFS): \rstgen.has_counter.ctr [1] = 1
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$459 (SB_DFFS): \rstgen.has_counter.ctr [0] = 1
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$458 (SB_DFFR): \rstgen.has_counter.ctr_zero = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$464 (SB_DFFS): \rstgen.has_counter.ctr [5] = 1
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$457 (SB_DFFR): \rstgen.has_shifter.shift [2] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$456 (SB_DFFR): \rstgen.has_shifter.shift [1] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$455 (SB_DFFR): \rstgen.has_shifter.shift [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$503 (SB_DFF): \blink.ctr [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$480 (SB_DFFE): \blink.blink_r = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$482 (SB_DFF): \blink.ctr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$483 (SB_DFF): \blink.ctr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$484 (SB_DFF): \blink.ctr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$485 (SB_DFF): \blink.ctr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$486 (SB_DFF): \blink.ctr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$487 (SB_DFF): \blink.ctr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$488 (SB_DFF): \blink.ctr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$489 (SB_DFF): \blink.ctr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$490 (SB_DFF): \blink.ctr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$491 (SB_DFF): \blink.ctr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$492 (SB_DFF): \blink.ctr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$493 (SB_DFF): \blink.ctr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$494 (SB_DFF): \blink.ctr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$495 (SB_DFF): \blink.ctr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$496 (SB_DFF): \blink.ctr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$497 (SB_DFF): \blink.ctr [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$498 (SB_DFF): \blink.ctr [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$499 (SB_DFF): \blink.ctr [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$500 (SB_DFF): \blink.ctr [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$501 (SB_DFF): \blink.ctr [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$502 (SB_DFF): \blink.ctr [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$481 (SB_DFF): \blink.ctr [0] = 0

6.39. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in smoldvi_fpga.
  Merging $auto$simplemap.cc:277:simplemap_mux$527 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [22], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$503 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$506 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [1], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$482 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$507 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [2], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$483 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$508 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [3], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$484 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$509 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [4], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$485 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$510 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [5], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$486 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$511 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [6], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$487 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$512 (A=1'0, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [7], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$488 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$513 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [8], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$489 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$514 (A=1'0, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [9], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$490 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$515 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [10], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$491 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$516 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [11], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$492 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$517 (A=1'0, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [12], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$493 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$518 (A=1'0, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [13], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$494 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$519 (A=1'0, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [14], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$495 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$520 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [15], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$496 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$521 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [16], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$497 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$522 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [17], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$498 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$523 (A=1'0, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [18], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$499 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$524 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [19], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$500 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$525 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [20], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$501 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$526 (A=1'0, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$358_Y [21], S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$502 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$505 (A=1'1, B=$auto$simplemap.cc:309:simplemap_lut$784, S=$techmap\blink.$procmux$377_CMP) into $auto$simplemap.cc:420:simplemap_dff$481 (SB_DFF).

6.40. Executing ICE40_OPT pass (performing simple optimizations).

6.40.1. Running ICE40 specific optimizations.

6.40.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.
<suppressed ~20 debug messages>

6.40.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
<suppressed ~120 debug messages>
Removed a total of 40 cells.

6.40.4. Executing OPT_RMDFF pass (remove dff with constant values).

6.40.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..
Removed 23 unused cells and 199 unused wires.
<suppressed ~24 debug messages>

6.40.6. Rerunning OPT passes. (Removed registers in this run.)

6.40.7. Running ICE40 specific optimizations.

6.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

6.40.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

6.40.10. Executing OPT_RMDFF pass (remove dff with constant values).

6.40.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

6.40.12. Finished OPT passes. (There is nothing left to do.)

6.41. Executing TECHMAP pass (map to technology primitives).

6.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

6.41.2. Continuing TECHMAP pass.
No more expansions possible.

6.42. Executing ABC pass (technology mapping using ABC).

6.42.1. Extracting gate netlist of module `\smoldvi_fpga' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 92 wires to a netlist network with 42 inputs and 22 outputs.

6.42.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      30.
ABC: Participating nodes from both networks       =      60.
ABC: Participating nodes from the first network   =      29. (  93.55 % of nodes)
ABC: Participating nodes from the second network  =      31. ( 100.00 % of nodes)
ABC: Node pairs (any polarity)                    =      29. (  93.55 % of names can be moved)
ABC: Node pairs (same polarity)                   =      22. (  70.97 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

6.42.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       30
ABC RESULTS:        internal signals:       28
ABC RESULTS:           input signals:       42
ABC RESULTS:          output signals:       22
Removing temp directory.

6.43. Executing ICE40_WRAPCARRY pass (wrap carries).

6.44. Executing TECHMAP pass (map to technology primitives).

6.44.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

6.44.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 2 unused cells and 68 unused wires.

6.45. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       52
  1-LUT               13
  2-LUT               30
  4-LUT                9

Eliminating LUTs.
Number of LUTs:       52
  1-LUT               13
  2-LUT               30
  4-LUT                9

Combining LUTs.
Number of LUTs:       45
  1-LUT                6
  2-LUT               30
  4-LUT                9

Eliminated 0 LUTs.
Combined 7 LUTs.
<suppressed ~265 debug messages>

6.46. Executing TECHMAP pass (map to technology primitives).

6.46.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

6.46.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011001101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
No more expansions possible.
<suppressed ~143 debug messages>
Removed 0 unused cells and 111 unused wires.

6.47. Executing AUTONAME pass.
Renamed 716 objects in module smoldvi_fpga (14 iterations).
<suppressed ~156 debug messages>

6.48. Executing HIERARCHY pass (managing design hierarchy).

6.48.1. Analyzing design hierarchy..
Top module:  \smoldvi_fpga

6.48.2. Analyzing design hierarchy..
Top module:  \smoldvi_fpga
Removed 0 unused modules.

6.49. Printing statistics.

=== smoldvi_fpga ===

   Number of wires:                 66
   Number of wire bits:            159
   Number of public wires:          66
   Number of public wire bits:     159
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                124
     SB_CARRY                       27
     SB_DFFE                         1
     SB_DFFR                        17
     SB_DFFS                         3
     SB_DFFSR                        7
     SB_DFFSS                       16
     SB_LUT4                        52
     SB_PLL40_PAD                    1

6.50. Executing CHECK pass (checking for obvious problems).
checking module smoldvi_fpga..
found and reported 0 problems.

7. Executing JSON backend.

Warnings: 9 unique messages, 9 total
End of script. Logfile hash: 74beb628ab, CPU: user 0.33s system 0.02s, MEM: 52.40 MB peak
Yosys 0.9+2406 (git sha1 aafaeb66, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 42% 16x read_verilog (0 sec), 12% 18x opt_clean (0 sec), ...
