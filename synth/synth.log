
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 aafaeb66, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Running command `read_verilog  -DFPGA -DFPGA_ICE40 ../hdl/fpga/smoldvi_fpga_icebreaker.v ../hdl/libfpga/common/blinky.v; synth_ice40 ; write_json smoldvi_icebreaker.json' --

1. Executing Verilog-2005 frontend: ../hdl/fpga/smoldvi_fpga_icebreaker.v
Parsing Verilog input from `../hdl/fpga/smoldvi_fpga_icebreaker.v' to AST representation.
Generating RTLIL representation for module `\smoldvi_fpga'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ../hdl/libfpga/common/blinky.v
Parsing Verilog input from `../hdl/libfpga/common/blinky.v' to AST representation.
Generating RTLIL representation for module `\blinky'.
Successfully finished Verilog frontend.

3. Executing SYNTH_ICE40 pass.

3.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

3.2. Executing HIERARCHY pass (managing design hierarchy).

3.2.1. Finding top of design hierarchy..
root of   0 design levels: blinky              
root of   1 design levels: smoldvi_fpga        
Automatically selected smoldvi_fpga as design top module.

3.2.2. Analyzing design hierarchy..
Top module:  \smoldvi_fpga
Used module:     \blinky
Parameter \CLK_HZ = 12000000
Parameter \BLINK_HZ = 1

3.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\blinky'.
Parameter \CLK_HZ = 12000000
Parameter \BLINK_HZ = 1
Generating RTLIL representation for module `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1'.

3.2.4. Analyzing design hierarchy..
Top module:  \smoldvi_fpga
Used module:     $paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1

3.2.5. Analyzing design hierarchy..
Top module:  \smoldvi_fpga
Used module:     $paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1
Removing unused module `\blinky'.
Removed 1 unused modules.

3.3. Executing PROC pass (convert processes to netlists).

3.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$../hdl/libfpga/common/blinky.v:57$347 in module $paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.
Removed a total of 0 dead cases.

3.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 2 assignments to connections.

3.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:34$352'.
  Set init value: \blink_r = 1'0
Found init rule in `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:32$351'.
  Set init value: \ctr = 23'00000000000000000000000

3.3.5. Executing PROC_ARST pass (detect async resets in processes).

3.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:34$352'.
Creating decoders for process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:32$351'.
Creating decoders for process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:57$347'.
     1/2: $0\ctr[22:0]
     2/2: $0\blink_r[0:0]

3.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.\ctr' using process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:57$347'.
  created $dff cell `$procdff$359' with positive edge clock.
Creating register for signal `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.\blink_r' using process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:57$347'.
  created $dff cell `$procdff$360' with positive edge clock.

3.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:34$352'.
Removing empty process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:32$351'.
Found and cleaned up 1 empty switch in `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:57$347'.
Removing empty process `$paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.$proc$../hdl/libfpga/common/blinky.v:57$347'.
Cleaned up 1 empty switch.

3.4. Executing FLATTEN pass (flatten design).
Using template $paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1 for cells of type $paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.
<suppressed ~1 debug messages>
No more expansions possible.
Deleting now unused module $paramod\blinky\CLK_HZ=12000000\BLINK_HZ=1.

3.5. Executing TRIBUF pass.

3.6. Executing DEMINOUT pass (demote inout ports to input or output).

3.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

3.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..
Removed 0 unused cells and 10 unused wires.
<suppressed ~5 debug messages>

3.9. Executing CHECK pass (checking for obvious problems).
checking module smoldvi_fpga..
Warning: Wire smoldvi_fpga.\led [1] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_p [3] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_p [2] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_p [1] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_p [0] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_n [3] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_n [2] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_n [1] is used but has no driver.
Warning: Wire smoldvi_fpga.\dvi_n [0] is used but has no driver.
found and reported 9 problems.

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \smoldvi_fpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \smoldvi_fpga.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

3.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing WREDUCE pass (reducing word size of cells).

3.12. Executing PEEPOPT pass (run peephole optimizers).

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

3.14. Executing SHARE pass (SAT-based resource sharing).

3.15. Executing TECHMAP pass (map to technology primitives).

3.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.15.2. Continuing TECHMAP pass.
No more expansions possible.

3.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

3.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module smoldvi_fpga:
  creating $macc model for $techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349 ($sub).
  creating $alu model for $macc $techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349.
  creating $alu cell for $techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349: $auto$alumacc.cc:485:replace_alu$361
  created 1 $alu and 0 $macc cells.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \smoldvi_fpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \smoldvi_fpga.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

3.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

3.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

3.19.9. Finished OPT passes. (There is nothing left to do.)

3.20. Executing FSM pass (extract and optimize FSM).

3.20.1. Executing FSM_DETECT pass (finding FSMs in design).

3.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

3.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

3.21.5. Finished fast OPT passes.

3.22. Executing MEMORY pass.

3.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

3.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

3.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).

3.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

3.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

3.25. Executing TECHMAP pass (map to technology primitives).

3.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

3.25.2. Continuing TECHMAP pass.
No more expansions possible.

3.26. Executing ICE40_BRAMINIT pass.

3.27. Executing OPT pass (performing simple optimizations).

3.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.
<suppressed ~6 debug messages>

3.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

3.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

3.27.5. Finished fast OPT passes.

3.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.29. Executing OPT pass (performing simple optimizations).

3.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

3.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

3.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \smoldvi_fpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \smoldvi_fpga.
Performed a total of 0 changes.

3.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

3.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

3.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

3.29.9. Finished OPT passes. (There is nothing left to do.)

3.30. Executing ICE40_WRAPCARRY pass (wrap carries).

3.31. Executing TECHMAP pass (map to technology primitives).

3.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

3.31.3. Continuing TECHMAP pass.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=23\B_WIDTH=1\Y_WIDTH=23 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~31 debug messages>

3.32. Executing OPT pass (performing simple optimizations).

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.
<suppressed ~69 debug messages>

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

3.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..
Removed 22 unused cells and 39 unused wires.
<suppressed ~23 debug messages>

3.32.5. Finished fast OPT passes.

3.33. Executing ICE40_OPT pass (performing simple optimizations).

3.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) smoldvi_fpga.$auto$alumacc.cc:485:replace_alu$361.slice[0].carry: CO=\blink.ctr [0]

3.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

3.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

3.33.4. Executing OPT_RMDFF pass (remove dff with constant values).

3.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

3.33.6. Rerunning OPT passes. (Removed registers in this run.)

3.33.7. Running ICE40 specific optimizations.

3.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

3.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

3.33.10. Executing OPT_RMDFF pass (remove dff with constant values).

3.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

3.33.12. Finished OPT passes. (There is nothing left to do.)

3.34. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module smoldvi_fpga:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$416 to $_DFFE_PP_ for $techmap\blink.$0\blink_r[0:0] -> \blink.blink_r.

3.35. Executing TECHMAP pass (map to technology primitives).

3.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

3.35.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~24 debug messages>

3.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.
<suppressed ~2 debug messages>

3.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping smoldvi_fpga.$auto$alumacc.cc:485:replace_alu$361.slice[0].carry ($lut).

3.38. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in smoldvi_fpga.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$439 (SB_DFF): \blink.ctr [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$417 (SB_DFF): \blink.ctr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$424 (SB_DFF): \blink.ctr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$416 (SB_DFFE): \blink.blink_r = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$418 (SB_DFF): \blink.ctr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$419 (SB_DFF): \blink.ctr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$420 (SB_DFF): \blink.ctr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$421 (SB_DFF): \blink.ctr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$422 (SB_DFF): \blink.ctr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$423 (SB_DFF): \blink.ctr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$425 (SB_DFF): \blink.ctr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$426 (SB_DFF): \blink.ctr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$427 (SB_DFF): \blink.ctr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$428 (SB_DFF): \blink.ctr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$429 (SB_DFF): \blink.ctr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$430 (SB_DFF): \blink.ctr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$431 (SB_DFF): \blink.ctr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$432 (SB_DFF): \blink.ctr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$433 (SB_DFF): \blink.ctr [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$434 (SB_DFF): \blink.ctr [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$435 (SB_DFF): \blink.ctr [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$436 (SB_DFF): \blink.ctr [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$437 (SB_DFF): \blink.ctr [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$438 (SB_DFF): \blink.ctr [21] = 0

3.39. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in smoldvi_fpga.
  Merging $auto$simplemap.cc:277:simplemap_mux$463 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [22], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$439 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$441 (A=1'1, B=$auto$simplemap.cc:309:simplemap_lut$664, S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$417 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$448 (A=1'0, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [7], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$424 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$442 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [1], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$418 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$443 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [2], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$419 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$444 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [3], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$420 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$445 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [4], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$421 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$446 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [5], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$422 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$447 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [6], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$423 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$449 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [8], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$425 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$450 (A=1'0, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [9], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$426 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$451 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [10], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$427 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$452 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [11], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$428 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$453 (A=1'0, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [12], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$429 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$454 (A=1'0, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [13], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$430 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$455 (A=1'0, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [14], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$431 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$456 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [15], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$432 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$457 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [16], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$433 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$458 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [17], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$434 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$459 (A=1'0, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [18], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$435 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$460 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [19], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$436 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$461 (A=1'1, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [20], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$437 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$462 (A=1'0, B=$techmap\blink.$sub$../hdl/libfpga/common/blinky.v:59$349_Y [21], S=$techmap\blink.$procmux$355_CMP) into $auto$simplemap.cc:420:simplemap_dff$438 (SB_DFF).

3.40. Executing ICE40_OPT pass (performing simple optimizations).

3.40.1. Running ICE40 specific optimizations.

3.40.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.
<suppressed ~20 debug messages>

3.40.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
<suppressed ~72 debug messages>
Removed a total of 24 cells.

3.40.4. Executing OPT_RMDFF pass (remove dff with constant values).

3.40.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..
Removed 23 unused cells and 103 unused wires.
<suppressed ~24 debug messages>

3.40.6. Rerunning OPT passes. (Removed registers in this run.)

3.40.7. Running ICE40 specific optimizations.

3.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module smoldvi_fpga.

3.40.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\smoldvi_fpga'.
Removed a total of 0 cells.

3.40.10. Executing OPT_RMDFF pass (remove dff with constant values).

3.40.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \smoldvi_fpga..

3.40.12. Finished OPT passes. (There is nothing left to do.)

3.41. Executing TECHMAP pass (map to technology primitives).

3.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

3.41.2. Continuing TECHMAP pass.
No more expansions possible.

3.42. Executing ABC pass (technology mapping using ABC).

3.42.1. Extracting gate netlist of module `\smoldvi_fpga' to `<abc-temp-dir>/input.blif'..
Extracted 25 gates and 49 wires to a netlist network with 24 inputs and 3 outputs.

3.42.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      11.
ABC: Participating nodes from both networks       =      21.
ABC: Participating nodes from the first network   =      10. (  90.91 % of nodes)
ABC: Participating nodes from the second network  =      11. ( 100.00 % of nodes)
ABC: Node pairs (any polarity)                    =      10. (  90.91 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  27.27 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

3.42.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       10
ABC RESULTS:        internal signals:       22
ABC RESULTS:           input signals:       24
ABC RESULTS:          output signals:        3
Removing temp directory.

3.43. Executing ICE40_WRAPCARRY pass (wrap carries).

3.44. Executing TECHMAP pass (map to technology primitives).

3.44.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

3.44.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 1 unused cells and 33 unused wires.

3.45. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       32
  1-LUT                2
  2-LUT               23
  4-LUT                7

Eliminating LUTs.
Number of LUTs:       32
  1-LUT                2
  2-LUT               23
  4-LUT                7

Combining LUTs.
Number of LUTs:       32
  1-LUT                2
  2-LUT               23
  4-LUT                7

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~127 debug messages>

3.46. Executing TECHMAP pass (map to technology primitives).

3.46.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.46.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
No more expansions possible.
<suppressed ~110 debug messages>
Removed 0 unused cells and 64 unused wires.

3.47. Executing AUTONAME pass.
Renamed 419 objects in module smoldvi_fpga (11 iterations).
<suppressed ~89 debug messages>

3.48. Executing HIERARCHY pass (managing design hierarchy).

3.48.1. Analyzing design hierarchy..
Top module:  \smoldvi_fpga

3.48.2. Analyzing design hierarchy..
Top module:  \smoldvi_fpga
Removed 0 unused modules.

3.49. Printing statistics.

=== smoldvi_fpga ===

   Number of wires:                 20
   Number of wire bits:             93
   Number of public wires:          20
   Number of public wire bits:      93
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 77
     SB_CARRY                       21
     SB_DFFE                         1
     SB_DFFSR                        7
     SB_DFFSS                       16
     SB_LUT4                        32

3.50. Executing CHECK pass (checking for obvious problems).
checking module smoldvi_fpga..
found and reported 0 problems.

4. Executing JSON backend.

Warnings: 9 unique messages, 9 total
End of script. Logfile hash: 86374c80f1, CPU: user 0.31s system 0.02s, MEM: 52.12 MB peak
Yosys 0.9+2406 (git sha1 aafaeb66, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 45% 13x read_verilog (0 sec), 10% 17x opt_clean (0 sec), ...
